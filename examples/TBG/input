# This example file demonstrates how to compute the bandstructure of twisted bilayer graphen (TBG)
# for larger twist angles (smaller unit cells). Its input_full version allows to construct, in addition,
# the low-energy tight-binding model using the Wannier90 code
# The 'geometry_source' field's integer number controls the twist angle of the TBG
! run task 'bands' to get the bandstructure. The output is 'bands.out',
! which has a set of x-y data blocks (i.e., can be plotted with xmgrace)
 tasks 1
 bands

! Important, this defines not only the k-grid, but also the R-grid for TB Hamiltonian
ngrid
 24 24 1

! k-path connecting vertices, format "x y z npoints"
path 4
0.666666 0.333333 0. 0
0.5 0. 0. 10
0.0 0. 0. 10
0.333333 0.666666 0. 10

! Generate the atoms and vectors from the geometry library for TBG
! the TBG's twist angle is computed out of the following integer parameter
! (the larger the number, the larger system is generated).
! Note, instead of 'geometry_source' one could enter atom positions and lattice vectors
! manually via the 'atoms' and 'avec' blocks correspondingly
geometry_source tbg
 2

! Impose Fermi level on the resulting bandstucture
efermi
 0.79


! Set to .true. to use the sparse eigensolver. Eigensolver, which always works with sparse
! matrices is available only via the linking of the code with MKL library. Otherwise,
! the algorithm will use the dense linear algebra solver in the sparse algorithm,
! which is time and memory consuming
sparse
 .false.

! Neglect all Hamiltonian terms smaller than sparse_eps
sparse_eps
 1.d-5

! Type of TB model 
sktype
 tbgsk

! in case of TBG, the first line = in-plane hopping model, the second line = out-of-plane hopping model
sk_subtype 2
 original
 sz_fit

