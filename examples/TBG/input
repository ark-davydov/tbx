# The following squence of actions allows one to compute 4-band low-energy Hamiltonian for 
# Twisted Bilayer Grapehne (TBG) out of the large full Slater-Koster (SK) Hamiltonian.
# Note, that the size of this SK Hamiltonian generated by this file  is 11908 x 11908, 
# therefore, one needs HPC resources 
# for this calculation. In order to try this example on a normal PC, one could
# reduce the 'geometry_source' integer parameter to lower values.
 (1) run task bands to get the bandstrucuture
 (2) run task eigen to have eigenvalues, eigenvectors on Monkhorst-Pack k-point grid
 (3) run task projection_wannier, first run it will produce only wannier input file
 (4) run wannier90.x -pp seedname.win (i.e., external wannier90 code)
 (5) run projection_wannier again (in this task large memory allocation possible, one needs reduce the number of mpi tasks)
 (6) run wannier90.x wannier.win (wannier90-3.1.0 code, uncomment site_symmetry,symmetrize_eps)
 (7) (optional) run task write_wfmloc (task, IMPORTANT: copy *_u.mat to *_u.in and(if present) *_u_dis.mat to *_u_dis.in first)
 (8) (optional) run plot_wf.py (python script) to plot the wavefunctions
 (9) run task hubbard_tbg to compute the extended Hubbard parameters
 (10) run task write_hubbardu to collect all computed matrix elements
 tasks 1
 bands
 eigen
 projection_wannier
 write_wfmloc
 hubbard_tbg
 write_hubbardu

! Important, this defines not only the k-grid, but also the R-grid fot TB hamiltonian
ngrid
 24 24 1

! k-path conntecting vertices, format "x y z npoints"
path 4
0.666666 0.333333 0. 0
0.5 0. 0. 10
0.0 0. 0. 10
0.333333 0.666666 0. 10

! Generate the atoms and vectors from the geometry library for TBG
! the TBG's twist angle is computed out of the integer parameter of the next line.
! Note, instead of 'geometry_source' one could enter atom positions and lattice vectors
! manually via the 'atoms' and 'avec' blocks correspodingly
geometry_source tbg
 131

! Impose Fermi level on the resulting bandstucture
efermi
 -0.4527

! energy grid for the density of states plot
egrid 100
 -1 1 

! Desired lowest, highest states to compute, note that (1) sparse eigensolver
! can not give give exactly that states, but it gives states closed to efermi 
! (the input parameter). (2) if upper state index is larger then number of available
! states, it will be modified, lower state also can be modified, such that its
! index is less or equal index of upper state. (3) Finally, if the dense
! eigensolver fail to converge some eigenstates, one should choose to compute
! the full spectrum
states
 5953 5956 ! N/2-1 N/2+2, consider only 4 bands closest to the Fermi level

! Set to .true. to use sparse eigensolver. Eigesolver, which always works with sparse
! matrices is available only via the linking of the code with MKL library. Otherwise,
! the algorithm will use the dense linear algebra solver in the sarse algorithm,
! which is time and memory consuming
sparse
 .false.

! Seedname for wannier90 interface
seedname
  wannier

! Neglect all Hamiltonian terms smaller than sparse_eps
sparse_eps
 1.d-5

! Type of TB model ('tbgsk' is the commongly adopted SK parametrisation),
! while 'tbgsk1' is a DFT-based fit
sktype
 tbgsk1

! Special way to construct trial orbitals for TBG low-energy Hamiltonian.
! It workrs when all computed eigenstates are ones for flat-bands of TBG
wannier_proj_mode
 tbg4band

! This block needs to be specified in order to provide positions of trial orbitals
! and construct their site-symmetry representations. Currently only basic atomic-like basis
! functions are implemented
projections 2
2 0.333333333 0.333333333 0.0
px 1.0 0.0 0.0 0.0 0.0 1.0
py 1.0 0.0 0.0 0.0 0.0 1.0
2 0.666666666 0.666666666 0.0
px 1.0 0.0 0.0 0.0 0.0 1.0
py 1.0 0.0 0.0 0.0 0.0 1.0
